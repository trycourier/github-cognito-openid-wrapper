service: github-sso

plugins:
  - serverless-webpack

package:
  exclude:
    - .git/*
    - npm-debug*

provider:
  environment:
    COGNITO_REDIRECT_URI: ${env:COGNITO_REDIRECT_URI, file(./config-dev.yml):COGNITO_REDIRECT_URI}
    GITHUB_CLIENT_ID: ${self:custom.githubClientId}
    GITHUB_CLIENT_SECRET: ${self:custom.githubClientSecret}
    GITHUB_LOGIN_URL: "https://github.com"
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:dynamodb:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - "table/${self:service}-${self:custom.stage}-*"
  name: aws
  region: us-east-1
  runtime: nodejs10.x
  stage: dev

custom:
  awsUserPoolId: ${env:AWS_USER_POOL_ID, file(./config-dev.yml):AWS_USER_POOL_ID}
  # awsGithubSsoGatewayUri: ${AWS_GITHUB_GATEWAY_URI}, file(./config-dev.yml)}
  awsGithubSsoGatewayUri: "https://f48w5i7gcl.execute-api.${self:provider.region}.amazonaws.com/${self:custom.stage}"
    # Fn::Join:
    #   - ""
    #   - - "https://"
    #     - Ref: ApiGatewayRestApi #- "f48w5i7gcl"
    #     - ".execute-api.${self:provider.region}.amazonaws.com/${self:custom.stage}"
  githubClientId: ${env:GITHUB_CLIENT_ID, file(./config-dev.yml):GITHUB_CLIENT_ID}
  githubClientSecret: ${env:GITHUB_CLIENT_SECRET, file(./config-dev.yml):GITHUB_CLIENT_SECRET}
  lambda:
    provisionedConcurrency:
      production: 1
      dev: 1
  stage: ${opt:stage, self:provider.stage}
  webpack:
    webpackConfig: 'webpack.config.serverless.js'

functions:
  authorize:
    handler: src/connectors/lambda/authorize.handler
    events:
      - http:
          path: /authorize
          method: get
          cors: true
    environment:
      DYNAMODB_STATE_TABLE: !Ref CognitoStatesTable
      REGION: !Ref "AWS::Region"
    provisionedConcurrency: ${self:custom.lambda.provisionedConcurrency.${self:custom.stage}}
  callback:
    handler: src/connectors/lambda/callback.handler
    events:
      - http:
          path: /callback
          method: get
          cors: true
    environment:
      DYNAMODB_STATE_TABLE: !Ref CognitoStatesTable
      REGION: !Ref "AWS::Region"
    provisionedConcurrency: ${self:custom.lambda.provisionedConcurrency.${self:custom.stage}}
  getOpenIdConfiguration:
    handler: src/connectors/lambda/open-id-configuration.handler
    events:
      - http:
          path: /.well-known/openid-configuration
          method: get
          cors: true
    provisionedConcurrency: ${self:custom.lambda.provisionedConcurrency.${self:custom.stage}}
  jwks:
    handler: src/connectors/lambda/jwks.handler
    events:
      - http:
          path: /.well-known/jwks.json
          method: get
          cors: true
      - http:
          path: /jwks.json
          method: get
          cors: true
    provisionedConcurrency: ${self:custom.lambda.provisionedConcurrency.${self:custom.stage}}
  token:
    handler: src/connectors/lambda/token.handler
    events:
      - http:
          path: /token
          method: get
          cors: true
      - http:
          path: /token
          method: post
          cors: true
    provisionedConcurrency: ${self:custom.lambda.provisionedConcurrency.${self:custom.stage}}
  userInfo:
    handler: src/connectors/lambda/userinfo.handler
    events:
      - http:
          path: /userinfo
          method: get
          cors: true
      - http:
          path: /userinfo
          method: post
          cors: true
    environment:
      GITHUB_API_URL: "https://api.github.com"
    provisionedConcurrency: ${self:custom.lambda.provisionedConcurrency.${self:custom.stage}}

resources:
  - ${file(aws-cloudformations/cognito.yml)}
  - ${file(aws-cloudformations/dynamo.yml)}
